"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user cannot start the document with the letters,
MZ.
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers.

"""

class SecureFile():
	def __init__(self,file,filename):
	
    # globals
		mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
		mycontext['size'] = None
    # local (per object) reference to the underlying file
		mycontext['lock']=createlock()
		self.file = file
		self.filename=filename
		self.size=None
		if self.filename not in mycontext:
			mycontext[self.filename]=None
		
	
	def setmaxfilesize(self,size):
	# size check for integer or >= 0
		
		try:
			if(size==None):
				mycontext['lock'].acquire(True)
				self.size=None
				mycontext[self.filename]=None
				mycontext['lock'].release()
			else:
				
				size=int(size)
			
				if(size>=0):
					mycontext['lock'].acquire(True)
					mycontext[self.filename] = size
					self.size=size
	# logic to truncate the file when size exceeds allowed filesize	
					data=self.file.readat(None,0)
					filelength=len(data)
					if(filelength>size):
						self.file.close()
						removefile(self.filename)
						self.file=openfile(self.filename,True)
						self.file.writeat(data[:size],0)
					mycontext['lock'].release()
				else:
					raise ValueError("Incorrect size!!")
		except ValueError:
			raise ValueError("Incorrect size!!")
		

	def writeat(self,data,offset):
		
	# check for offset value >=0 and integer
		try:
			offset=int(offset)
			if(offset>=0):
			
				mycontext['lock'].acquire(True)
				if mycontext[self.filename]:
	
					self.size=mycontext[self.filename]
	# condition to check offset size >= maximum allowed size				
					if self.size and offset>= self.size:
						raise SeekPastEndOfFileError("Tried to write past the end!")
	# condition to check if offset < maximum size limit with data to write then append data up to maximum allowed size
					elif self.size and (offset+len(data))>= self.size:
						substrlen=self.size-offset						
						self.file.writeat(data[:substrlen],offset)
	# normal write operation when size constraint is not applied
					else:
						self.file.writeat(data,offset)
				else:
					self.file.writeat(data,offset)
				mycontext['lock'].release()
			else:
				raise RepyArgumentError("Incorrect Offset!! Min value is 0")
		except ValueError:
			raise RepyArgumentError("Incorrect offset!! offset can be integer only!")
	
	def readat(self,bytes,offset):
		return self.file.readat(bytes,offset)
	
	def close(self):
		return self.file.close()

def secure_openfile(filename, create):
	f = openfile(filename,create)
	return SecureFile(f,filename)

def secure_listfiles():
	return listfiles()

def secure_removefile(filename):
	return removefile(filename)



# The code here sets up type checking and variable hiding.  
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
